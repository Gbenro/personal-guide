# =============================================================================
# Personal Guide - Docker Compose for Local Development
# Multi-service setup with monitoring and observability
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  personal-guide-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: personal-guide-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXTAUTH_URL=http://localhost:3000
      - ENABLE_MONITORING=true
    env_file:
      - .env.local
    volumes:
      # Mount source code for hot reloading in development
      - ./apps/web/src:/app/apps/web/src:ro
      - ./apps/web/public:/app/apps/web/public:ro
    depends_on:
      - postgres
      - redis
    networks:
      - personal-guide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================

  postgres:
    image: postgres:16-alpine
    container_name: personal-guide-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: personal_guide
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - personal-guide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d personal_guide"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # CACHING & SESSION STORAGE
  # =============================================================================

  redis:
    image: redis:7-alpine
    container_name: personal-guide-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    networks:
      - personal-guide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: personal-guide-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - personal-guide-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: personal-guide-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - personal-guide-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: personal-guide-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - personal-guide-network
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: personal-guide-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - personal-guide-network
    restart: unless-stopped
    depends_on:
      - loki

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: personal-guide-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@personalguide.app
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - personal-guide-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: personal-guide-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-redis}"
    networks:
      - personal-guide-network
    restart: unless-stopped
    depends_on:
      - redis

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  personal-guide-network:
    driver: bridge
    name: personal-guide-network

volumes:
  postgres_data:
    name: personal-guide-postgres-data
  redis_data:
    name: personal-guide-redis-data
  prometheus_data:
    name: personal-guide-prometheus-data
  grafana_data:
    name: personal-guide-grafana-data
  loki_data:
    name: personal-guide-loki-data
  pgadmin_data:
    name: personal-guide-pgadmin-data